# -*- mode: ruby -*-
# # vi: set ft=ruby :

require 'fileutils'
require 'open-uri'
require 'tempfile'
require 'yaml'


Vagrant.require_version ">= 1.6.0"

$update_channel = "alpha"
$controller_count = 1
$controller_vm_memory = 512
$worker_count =1
$worker_vm_memory = 1024
$etcd_count = 1
$etcd_vm_memory = 512
$worker_lb_ports = ["80"]

CONFIG = File.expand_path("config.rb")
TEMPLATE = File.expand_path("ruby/haproxy/haproxy.rb")
KUBECTL = File.expand_path("ruby/kubernetes/kubeclient.rb")

if File.exist?(CONFIG) 
  require CONFIG
end

if File.exist?(TEMPLATE)
  require TEMPLATE
else
  abort ("missing required template.rb file")
end

if File.exist?(KUBECTL)
  require KUBECTL
else
  abort ("missing required kubectl.rb file")
end

if $worker_vm_memory < 1024
  puts "Workers should have at least 1024 MB of memory"
end

K8S_API_VER="v1"
CONTROLLER_CLUSTER_IP="10.3.0.1"

ETCD_CLOUD_CONFIG_PATH = File.expand_path("etcd-cloud-config.yaml")
CONTROLLER_CLOUD_CONFIG_PATH = File.expand_path("../generic/controller-install.sh")
WORKER_CLOUD_CONFIG_PATH = File.expand_path("../generic/worker-install.sh")

#load balancers
ETCD_HAPROXY_IP="172.17.4.201"
MASTER_HAPROXY_IP="172.17.4.202"
WORKER_HAPROXY_IP="172.17.4.203"
ETCD_ROLE_NAME = "etcd"
MASTER_ROLE_NAME = "master"
WORKER_ROLE_NAME = "worker"
ETCD_LB_PORTS = ["2379","2380"]
MASTER_LB_PORTS = ["443"]

#kubernetes files
SECRETS=File.expand_path("secrets/")
ENTITIES=File.expand_path("kubernetes-files/")

def etcdIP(num)
  return "172.17.4.#{num+50}"
end

def controllerIP(num)
  return "172.17.4.#{num+100}"
end

def workerIP(num)
  return "172.17.4.#{num+150}"
end

ctrlIPs = [*1..$controller_count].map{ |i| controllerIP(i) }
controllerIPs = ctrlIPs <<  CONTROLLER_CLUSTER_IP << MASTER_HAPROXY_IP
etcdIPs = [*1..$etcd_count].map{ |i| etcdIP(i) }
workerIPs = [*1..$worker_count].map{ |i| workerIP(i) }
initial_etcd_cluster = etcdIPs.map.with_index{ |ip, i| "e#{i+1}=http://#{ip}:2380" }.join(",")
etcd_endpoints = etcdIPs.map.with_index{ |ip, i| "http://#{ip}:2379" }.join(",")
etcd_lb_endpoint = "http://#{ETCD_HAPROXY_IP}:2379"

load_balancers = { ETCD_ROLE_NAME => {ip: ETCD_HAPROXY_IP, ips: etcdIPs, ports:  ETCD_LB_PORTS }, 
                    MASTER_ROLE_NAME => {ip: MASTER_HAPROXY_IP, ips: ctrlIPs, ports: MASTER_LB_PORTS}, 
                    WORKER_ROLE_NAME => {ip: WORKER_HAPROXY_IP, ips: workerIPs, ports: $worker_lb_ports}}

# Generate root CA
system("mkdir -p ssl && ./../../lib/init-ssl-ca ssl") or abort ("failed generating SSL artifacts")

# Generate admin key/cert
system("./../../lib/init-ssl ssl admin kube-admin") or abort("failed generating admin SSL artifacts")

SSL_OPTIONS = {
              client_cert: OpenSSL::X509::Certificate.new(File.read('ssl/admin.pem')),
              client_key:  OpenSSL::PKey::RSA.new(File.read('ssl/admin-key.pem')),
              ca_file:     'ssl/ca.pem',
              verify_ssl:  OpenSSL::SSL::VERIFY_PEER
            }

def provisionMachineSSL(machine,certBaseName,cn,ipAddrs)
  tarFile = "ssl/#{cn}.tar"
  ipString = ipAddrs.map.with_index { |ip, i| "IP.#{i+1}=#{ip}"}.join(",")
  system("./../../lib/init-ssl ssl #{certBaseName} #{cn} #{ipString}") or abort("failed generating #{cn} SSL artifacts")
  machine.vm.provision :file, :source => tarFile, :destination => "/tmp/ssl.tar"
  machine.vm.provision :shell, :inline => "mkdir -p /etc/kubernetes/ssl && tar -C /etc/kubernetes/ssl -xf /tmp/ssl.tar", :privileged => true
end

unless Vagrant.has_plugin?("vagrant-triggers")
  abort('vagrant-triggers plugin is not installed!\\nTo install it: vagrant plugin install vagrant-triggers')
end

Vagrant.configure("2") do |config|
  # always use Vagrant's insecure key
  config.ssh.insert_key = false

  config.vm.box = "coreos-%s" % $update_channel
  config.vm.box_version = ">= 766.0.0"
  config.vm.box_url = "http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant.json" % $update_channel

  ["vmware_fusion", "vmware_workstation"].each do |vmware|
    config.vm.provider vmware do |v, override|
      override.vm.box_url = "http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant_vmware_fusion.json" % $update_channel
    end
  end

  config.vm.provider :virtualbox do |v|
    # On VirtualBox, we don't have guest additions or a functional vboxsf
    # in CoreOS, so tell Vagrant that so it can be smarter.
    v.check_guest_additions = false
    v.functional_vboxsf     = false
  end

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  ["vmware_fusion", "vmware_workstation"].each do |vmware|
    config.vm.provider vmware do |v|
      v.vmx['numvcpus'] = 1
      v.gui = false
    end
  end

  config.vm.provider :virtualbox do |vb|
    vb.cpus = 1
    vb.gui = false
  end

  load_balancers.each do |name, parameters|

    config.vm.define vm_name = "lb-#{name}" do |haproxy|

      env_file = Tempfile.new('env_file')
      env_file.write("ETCD_ENDPOINTS=#{etcd_lb_endpoint}\n")
      env_file.write("NAME=lb-#{name}")
      env_file.close

      # templates
      templateUtil = TemplateUtil.new(name,parameters[:ips],parameters[:ports])
      templateUtil.fillTemplates
      
      # lb configuration file
      lb_config_file = Tempfile.new('configuration') 
      lb_config_file.write(templateUtil.configuration)
      lb_config_file.close

      # lb service file
      lb_service_file = Tempfile.new('service')
      lb_service_file.write(templateUtil.service)
      lb_service_file.close
     
      haproxy.vm.hostname = "lb-#{name}"
      haproxy.vm.box_check_update = true
      haproxy.vm.network "private_network", ip: parameters[:ip]
      haproxy.vm.provision :file, :source => env_file, :destination => "/tmp/coreos-lb-options.env"
      haproxy.vm.provision :shell, :inline => "mkdir -p /run/coreos-lb && mv /tmp/coreos-lb-options.env /run/coreos-lb/options.env", :privileged => true
      haproxy.vm.provision :file, :source => lb_config_file, :destination => "/tmp/haproxy.cfg"
      haproxy.vm.provision :file, :source => lb_service_file, :destination => "/tmp/vagrantfile-user-data"
      haproxy.vm.provision :shell, :inline => "mkdir -p /etc/haproxy && mv /tmp/haproxy.cfg /etc/haproxy/haproxy.cfg", :privileged => true
      haproxy.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true  
    
    end

  end

  (1..$etcd_count).each do |i|
    config.vm.define vm_name = "e%d" % i do |etcd|

      data = YAML.load(IO.readlines(ETCD_CLOUD_CONFIG_PATH)[1..-1].join)
      data['coreos']['etcd2']['initial-cluster'] = initial_etcd_cluster
      data['coreos']['etcd2']['name'] = vm_name
      data['coreos']['fleet']['metadata'] = "role=etcd,hostname=" + vm_name
      etcd_config_file = Tempfile.new('etcd_config')
      etcd_config_file.write("#cloud-config\n#{data.to_yaml}")
      etcd_config_file.close

      etcd.vm.hostname = vm_name

      ["vmware_fusion", "vmware_workstation"].each do |vmware|
        etcd.vm.provider vmware do |v|
          v.vmx['memsize'] = $etcd_vm_memory
        end
      end

      etcd.vm.provider :virtualbox do |vb|
        vb.memory = $etcd_vm_memory
      end

      etcd.vm.network :private_network, ip: etcdIP(i)

      etcd.vm.provision :file, :source => etcd_config_file.path, :destination => "/tmp/vagrantfile-user-data"
      etcd.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
    end
  end


  (1..$controller_count).each do |i|
    config.vm.define vm_name = "c%d" % i do |controller|

      env_file = Tempfile.new('env_file')
      env_file.write("ETCD_ENDPOINTS=#{etcd_lb_endpoint}\n")
      env_file.write("NAME=#{vm_name}")
      env_file.close

      controller.vm.hostname = vm_name

      ["vmware_fusion", "vmware_workstation"].each do |vmware|
        controller.vm.provider vmware do |v|
          v.vmx['memsize'] = $controller_vm_memory
        end
      end

      controller.vm.provider :virtualbox do |vb|
        vb.memory = $controller_vm_memory
      end

      controllerIP = controllerIP(i)
      controller.vm.network :private_network, ip: controllerIP

      # Each controller gets the same cert
      provisionMachineSSL(controller,"apiserver","kube-apiserver-#{controllerIP}",controllerIPs)

      controller.vm.provision :file, :source => env_file, :destination => "/tmp/coreos-kube-options.env"
      controller.vm.provision :shell, :inline => "mkdir -p /run/coreos-kubernetes && mv /tmp/coreos-kube-options.env /run/coreos-kubernetes/options.env", :privileged => true

      controller.vm.provision :file, :source => CONTROLLER_CLOUD_CONFIG_PATH, :destination => "/tmp/vagrantfile-user-data"
      controller.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
    end
  end

  (1..$worker_count).each do |i|
    config.vm.define vm_name = "w%d" % i do |worker|
      worker.vm.hostname = vm_name

      env_file = Tempfile.new('env_file')
      env_file.write("ETCD_ENDPOINTS=#{etcd_lb_endpoint}\n")
      env_file.write("CONTROLLER_ENDPOINT=https://#{MASTER_HAPROXY_IP}\n")
      env_file.write("NAME=#{vm_name}")
      env_file.close

      ["vmware_fusion", "vmware_workstation"].each do |vmware|
        worker.vm.provider vmware do |v|
          v.vmx['memsize'] = $worker_vm_memory
        end
      end

      worker.vm.provider :virtualbox do |vb|
        vb.memory = $worker_vm_memory
      end

      worker.vm.synced_folder "share", "/vagrant", id: "core", type: "nfs",  :linux__nfs_options => ['rw','no_subtree_check','no_root_squash','async']

      workerIP = workerIP(i)
      worker.vm.network :private_network, ip: workerIP

      provisionMachineSSL(worker,"worker","kube-worker-#{workerIP}",[workerIP])

      worker.vm.provision :file, :source => env_file, :destination => "/tmp/coreos-kube-options.env"
      worker.vm.provision :shell, :inline => "mkdir -p /run/coreos-kubernetes && mv /tmp/coreos-kube-options.env /run/coreos-kubernetes/options.env", :privileged => true

      worker.vm.provision :file, :source => WORKER_CLOUD_CONFIG_PATH, :destination => "/tmp/vagrantfile-user-data"
      worker.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true

      worker.vm.provision "trigger" do |trigger|
        trigger.fire do

          if(i == $worker_count) then
            
            info "Connecting to Kubernetes API..."
            client = Kubeclient.new "https://#{MASTER_HAPROXY_IP}:443", "/api/" , K8S_API_VER, ssl_options: SSL_OPTIONS

            #esperar hasta que el API server esté levantado
            while (!client.api_valid?)
              info "Kubernetes API server is down. Retrying connection in 10 secs."
              sleep(10)
            end

            info "Kubernetes API ready, starting service deployment..."
            client.deploy_all SECRETS, ENTITIES
                     
          end
        end
      end
    end
  end
end


