#!/bin/bash

# The above settings can optionally be overridden using an environment file:
ENV_FILE=/run/coreos-lb/options.env

function init_config(){

    local REQUIRED=('ETCD_ENDPOINTS')

	if [ -f $ENV_FILE ]; then
        export $(cat $ENV_FILE | xargs)
    fi

    for REQ in "${REQUIRED[@]}"; do
        if [ -z "$(eval echo \$$REQ)" ]; then
            echo "Missing required config value: ${REQ}"
            exit 1
        fi
    done
}

function init_templates(){

    local TEMPLATE=/etc/systemd/system/fleet.service.d/10-etcd.conf
    [ -f $TEMPLATE ] || {
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
[Service]
Environment=FLEET_ETCD_SERVERS=$ETCD_ENDPOINTS
Environment=FLEET_METADATA=role=lb,hostname=$NAME
EOF
    }

    #docker dropin: journal logging
    local TEMPLATE=/etc/systemd/system/docker.service.d/50-docker-journal.conf
    [ -f $TEMPLATE ] || {
        echo "TEMPLATE: $TEMPLATE"
        mkdir -p $(dirname $TEMPLATE)
        cat << EOF > $TEMPLATE
[Service] 
Environment="DOCKER_OPTS=${DOCKER_OPTS} --log-driver=journald"
EOF
    }
	
	#creamos el servicio
    local TEMPLATE=/etc/systemd/system/haproxy.service
      [ -f $TEMPLATE ] || {
          echo "TEMPLATE: $TEMPLATE"
          mkdir -p $(dirname $TEMPLATE)
          cat << EOF > $TEMPLATE
[Unit]
Description=Haproxy service
After=docker.service
Requires=docker.service
[Service]
TimeoutStartSec=0
ExecStartPre=-/usr/bin/docker kill haproxy
ExecStartPre=-/usr/bin/docker rm haproxy
ExecStartPre=/usr/bin/docker pull haproxy:1.6
ExecStart=/usr/bin/bash -c \
"/usr/bin/docker run -d --name haproxy \
<% @ports.each do |port| -%>
<%= "-p #{port}:#{port}" -%> \
<% end -%>
-p 1936:1936 \
-v /dev/log:/dev/log \
-v /run/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro \
haproxy:1.6"

[Install]
WantedBy=multi-user.target
EOF
    }
}

init_config
init_templates

systemctl stop update-engine; systemctl mask update-engine
systemctl daemon-reload
systemctl enable fleet; systemctl start fleet
systemctl enable haproxy.service; systemctl start haproxy.service
